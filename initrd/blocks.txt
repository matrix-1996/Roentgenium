{block 0}
text(colorforth) textcapitalized(jul31) textcapitalized(2001) textcapitalized(chuck) textcapitalized(moore) textcapitalized(public) textcapitalized(domain)
textcapitalized(2016) textcapitalized(konstantin)
textcapitalized(tcholokachvili)
executeshort(30) execute(load) 
define(colors) compileshort(56) compileword(load) compileword(;) execute(mark) execute(empty)
{block 1}
{block 2}
{block 3}
{block 4}
{block 5}
{block 6}
execute(macro) 
define(swap) hex_compileshort(168b) compileword(2,) hex_compilelong(c28b0689) compileword(,) compileword(;) 
define(0) compilemacro(?dup) hex_compileshort(c031) compileword(2,) compileword(;) 
define(if) hex_compileshort(74) compileword(2,) compileword(here) compileword(;) 
define(-if) hex_compileshort(79) compileword(2,) compileword(here) compileword(;) 
define(a) compilemacro(?dup) hex_compileshort(c28b) compileword(2,) compileword(;) 
define(a!) compileword(?lit) compileword(if) hex_compileshort(ba) compileword(1,) compileword(,) compileword(;) compileword(then) hex_compileshort(d08b) compileword(2,) compilemacro(drop) compileword(;) 
define(2*) hex_compileshort(e0d1) compileword(2,) compileword(;) 
define(a,) compileword(2*) compileword(2*) compileword(,) compileword(;) 
define(@) compileword(?lit) compileword(if) compilemacro(?dup) hex_compileshort(58b) compileword(2,) compilemacro(a,) compileword(;) compileword(then) hex_compileshort(85048b) compileword(3,) compileword(0) compileword(,) compileword(;) 
define(!) compileword(?lit) compileword(if) compileword(?lit) compileword(if) hex_compileshort(5c7) compileword(2,) compileword(swap) compilemacro(a,) compileword(,) compileword(;) compileword(then) hex_compileshort(589) compileword(2,) compilemacro(a,) compilemacro(drop) compileword(;) compileword(then) compilemacro(a!) hex_compileshort(950489) compileword(3,) compileword(0) compileword(,) compilemacro(drop) compileword(;) 
define(nip) hex_compileshort(4768d) compileword(3,) compileword(;) 
define(+) compileword(?lit) compileword(if) hex_compileshort(5) compileword(1,) compileword(,) compileword(;) compileword(then) hex_compileshort(603) compileword(2,) compilemacro(nip) compileword(;) 
define(or) hex_compileshort(633) 
define(binary) compileword(?lit) compileword(if) compileword(swap) compileshort(2) compileword(+) compileword(1,) compileword(,) compileword(;) compileword(then) compileword(2,) compilemacro(nip) compileword(;) 
define(and) hex_compileshort(623) compilemacro(binary) compileword(;) 
define(u+) compileword(?lit) compileword(if) hex_compileshort(681) compileword(2,) compileword(,) compileword(;) compileword(then) hex_compileshort(44601) compileword(3,) compilemacro(drop) compileword(;) 
define(?) compileword(?lit) hex_compileshort(a9) compileword(1,) compileword(,) compileword(;)
{block 7}
textcapitalized(pentium) text(macros:) text(1,) text(2,) text(3,) text(,) text(compile) text(1-4) text(bytes) 
define(drop) text(lodsd,) text(flags) text(unchanged,) text(why) text(sp) text(is) text(in) textallcaps(esi) 
define(over) text(sp) text(4) text(+) text(@) 
define(swap) text(sp) text(xchg) 
define(0) text(0) text(0) text(xor,) text(macro) text(0) text(identical) text(to) text(number) text(0) 
define(a) text(2) text(0) text(mov,) text(never) text(used?) 
define(a!) text(0) text(2) text(mov,) text(unoptimized) 
define(@) textallcaps(eax) text(4) text(*,) text(unoptimized) 
define(!) textallcaps(edx) text(4) text(*) 
define(nop) text(used) text(to) text(thwart) text(look-back) text(optimization) 
define(-) text(ones-complement) 
define(2*) 
define(2/) 
define(if) text(jz,) text(flags) text(set,) text(max) text(127) text(bytes,) text(leave) text(address) 
define(-if) text(jns,) text(same) 
define(then) text(fix) text(address) text(-) text(in) text(kernel) 
define(push) textallcaps(eax) text(push) 
define(pop) textallcaps(eax) text(pop) 
define(u+) text(add) text(to) text(2nd) text(number,) text(literal) text(or) text(value) 
define(?) text(test) text(bits,) text(set) text(flags,) text(literal) text(only!)
{block 8}
text(macros) 
define(over) compilemacro(?dup) hex_compileshort(4468b) compileword(3,) compileword(;) 
define(push) hex_compileshort(50) compileword(1,) compilemacro(drop) compileword(;) 
define(pop) compilemacro(?dup) hex_compileshort(58) compileword(1,) compileword(;) 
define(-) hex_compileshort(d0f7) compileword(2,) compileword(;) 
define(for) compilemacro(push) compilemacro(begin) compileword(;) 
define(*next) compileword(swap) 
define(next) hex_compilelong(75240cff) 
define(0next) compileword(,) compileword(here) compileword(-) compileword(+) compileword(1,) hex_compileshort(4c483) compileword(3,) compileword(;) 
define(-next) hex_compilelong(79240cff) compilemacro(0next) compileword(;) 
define(i) compilemacro(?dup) hex_compileshort(24048b) compileword(3,) compileword(;) 
define(*end) compileword(swap) 
define(end) hex_compileshort(eb) compileword(1,) compileword(here) compileword(-) compileword(+) compileword(1,) compileword(;) 
define(+!) compileword(?lit) compileword(if) compileword(?lit) compileword(if) hex_compileshort(581) compileword(2,) compileword(swap) compilemacro(a,) compileword(,) compileword(;) compileword(then) hex_compileshort(501) compileword(2,) compilemacro(a,) compilemacro(drop) compileword(;) compileword(then) compilemacro(a!) hex_compileshort(950401) compileword(3,) compileword(0) compileword(,) compilemacro(drop) compileword(;) 
define(nop) hex_compileshort(90) compileword(1,) compileword(;) 
define(align) compileword(here) compileword(-) compileshort(3) compileword(and) compileword(drop) compileword(if) compilemacro(nop) compilemacro(align) compileword(;) compileword(then) compileword(;) 
define(or!) compilemacro(a!) hex_compileshort(950409) compileword(3,) compileword(0) compileword(,) compilemacro(drop) compileword(;) 
define(*) hex_compileshort(6af0f) compileword(3,) compilemacro(nip) compileword(;) 
define(*/) hex_compileshort(c88b) compileword(2,) compilemacro(drop) hex_compilelong(f9f72ef7) compileword(,) compilemacro(nip) compileword(;) 
define(/mod) compilemacro(swap) hex_compileshort(99) compileword(1,) hex_compilelong(16893ef7) compileword(,) compileword(;) 
define(/) compilemacro(/mod) compilemacro(nip) compileword(;) 
define(mod) compilemacro(/mod) compilemacro(drop) compileword(;)
{block 9}
define(for) compileword(n) text(push) text(count) text(onto) text(return) text(stack,) text(falls) text(into) compileword(begin) 
define(begin) compileword(-a) text(current) text(code) text(address) text(-) text(byte) 
define(*next) compileword(aa-aa) text(swap) compileword(for) text(and) compileword(if) text(addresses) 
define(next) compileword(a) text(decrement) text(count,) text(jnz) text(to) compileword(for,) text(pop) text(return) text(stack) text(when) text(done) 
define(-next) compileword(a) text(same,) text(jns) text(-) text(loop) text(includes) text(0) 
define(i) compileword(-n) text(copy) text(loop) text(index) text(to) text(data) text(stack) 
define(end) compileword(a) text(jmp) text(to) compileword(begin) 
define(+!) compileword(na) text(add) text(to) text(memory,) text(2) text(literals) text(optimized) 
define(align) text(next) text(call) text(to) text(end) text(on) text(word) text(boundary) 
define(or!) compileword(na) text(inclusive-or) text(to) text(memory,) text(unoptimized) 
define(*) compileword(mm-p) text(32-bit) text(product) 
define(*/) compileword(mnd-q) text(64-bit) text(product,) text(then) text(quotient) 
define(/mod) compileword(nd-rq) text(remainder) text(and) text(quotient) 
define(/) compileword(nd-q) text(quotient) 
define(mod) compileword(nd-r) text(remainder) 
define(time) compileword(-n) textcapitalized(pentium) text(cycle) text(counter,) text(calibrate) text(to) text(get) text(actual) text(clock) text(rate)
{block 10}
textcapitalized(compiled) text(macros) 
define(2/) hex_compileshort(f8d1) compileword(2,) compileword(;) 
define(time) compilemacro(?dup) hex_compileshort(310f) compileword(2,) compileword(;) execute(forth) 
define(@) compileword(@) compileword(;) 
define(!) compileword(!) compileword(;) 
define(+) compileword(+) compileword(;) 
define(*/) compileword(*/) compileword(;) 
define(*) compileword(*) compileword(;) 
define(/) 
define(bpad) compileword(/) compileword(;) 
define(2/) compileword(2/) compileword(;) 
define(dup) compileword(dup) compileword(;) textcapitalized(arithmetic) 
define(negate) compileword(-) compileshort(1) compileword(+) compileword(;) 
define(min) compileword(less) compileword(if) compileword(drop) compileword(;) compileword(then) compileword(swap) compileword(drop) compileword(;) 
define(abs) compileword(dup) compileword(negate) 
define(max) compileword(less) compileword(if) compileword(swap) compileword(then) compileword(drop) compileword(;)
{block 11}
textcapitalized(these) text(macros) text(may) text(be) text(white,) text(others) text(may) text(not) 
define(@) compileword(etc) textcapitalized(arithmetic) 
define(negate) compileword(n-n) text(when) text(you) text(just) text(cant) text(use) compileword(-) 
define(min) compileword(nn-n) text(minimum) 
define(abs) compileword(n-u) text(absolute) text(value) 
define(max) compileword(nn-n) text(maximum)
{block 12}
textcapitalized(colors) text(etc) 
define(block) hex_compileshort(100) compileword(*) compileword(;) 
define(white) hex_compileshort(ffffff) compileword(color) compileword(;) 
define(red) hex_compileshort(ff0000) compileword(color) compileword(;) 
define(green) hex_compileshort(ff00) compileword(color) compileword(;) 
define(blue) hex_compileshort(ff) compileword(color) compileword(;) 
define(silver) hex_compileshort(bfbfbf) compileword(color) compileword(;) 
define(black) compileshort(0) compileword(color) compileword(;) 
define(5*) compileshort(5) compileword(for) compileword(2emit) compileword(next) compileword(;)
{block 13}
{block 14}
textallcaps(ascii) execute(macro) 
define(1@) hex_compileshort(8a) compileword(2,) compileword(;) execute(forth) 
define(string) 
define(addr) compileword(pop) compileword(;) 
define(cf-ii) compileword(string) hex_executelong(6f747200) execute(,) hex_executelong(696e6165) execute(,) hex_executelong(79636d73) execute(,) hex_executelong(7766676c) execute(,) hex_executelong(62707664) execute(,) hex_executelong(71757868) execute(,) hex_executelong(33323130) execute(,) hex_executelong(37363534) execute(,) hex_executelong(2d6a3938) execute(,) hex_executelong(2f7a2e6b) execute(,) hex_executelong(2b213a3b) execute(,) hex_executelong(3f2c2a40) execute(,) 
define(ch) hex_compileshort(fffffff0) compileword(and) compileword(unpack) execute(cf-ii) compileword(+) compileword(1@) hex_compileshort(ff) compileword(and) compileword(;) 
define(ii-cf) compileword(string) hex_executelong(61602a00) execute(,) hex_executelong(65646362) execute(,) hex_executelong(2b2d6766) execute(,) hex_executelong(2725232e) execute(,) hex_executelong(1b1a1918) execute(,) hex_executelong(1f1e1d1c) execute(,) hex_executelong(28292120) execute(,) hex_executelong(2f6a6968) execute(,) hex_executelong(3a43352c) execute(,) hex_executelong(3d3e3440) execute(,) hex_executelong(54523744) execute(,) hex_executelong(3336393c) execute(,) hex_executelong(38314742) execute(,) hex_executelong(3f414632) execute(,) hex_executelong(6b563b45) execute(,) hex_executelong(6f6e6d6c) execute(,) hex_executelong(a130570) execute(,) hex_executelong(d0e0410) execute(,) hex_executelong(24220714) execute(,) hex_executeshort(306090c) execute(,) hex_executelong(8011712) execute(,) hex_executelong(f111602) execute(,) hex_executelong(71260b15) execute(,) hex_executelong(75747372) execute(,) 
define(chc) hex_compileshort(ffffffe0) compileword(+) execute(ii-cf) compileword(+) compileword(1@) hex_compileshort(ff) compileword(and) compileword(;)
{block 15}
{block 16}
text(added) text(macros) execute(macro) 
define(?f) hex_compileshort(c021) compileword(2,) compileword(;) 
define(0if) hex_compileshort(75) compileword(2,) compileword(here) compileword(;) 
define(+if) hex_compileshort(78) compileword(2,) compileword(here) compileword(;) 
define(1+) hex_compileshort(40) compileword(1,) compileword(;) 
define(1-) hex_compileshort(48) compileword(1,) compileword(;) 
define(@b) hex_compileshort(8a) compileword(2,) compileword(;) 
define(@w) hex_compileshort(8b66) compileword(3,) compileword(;) 
define(@l) hex_compileshort(8b) compileword(2,) compileword(;) 
define(!b) compilemacro(a!) hex_compileshort(288) compileword(2,) compilemacro(drop) compileword(;) 
define(!w) compilemacro(a!) hex_compileshort(28966) compileword(3,) compilemacro(drop) compileword(;) 
define(!l) compilemacro(a!) hex_compileshort(289) compileword(2,) compilemacro(drop) compileword(;) execute(forth)
{block 17}
text(added) text(macros) 
define(?f) text(set) text(flags) text(to) text(reflect) text(tos) 
define(0if) text(jnz) text(aids) text(in) text(clarity) 
define(+if) text(js,) text(this) text(complements) text(the) text(set) 
define(1+) text(increment) text(tos) 
define(1-) text(decrement) text(tos) 
define(@b) text(fetch) text(byte) text(from) text(absolute) text(addr.) 
define(@w) text(fetch) text(word) text(from) text(absolute) text(addr.) 
define(@l) text(fetch) text(long) text(from) text(absolute) text(addr.) 
define(!b) text(store) text(byte) text(in) text(absolute) text(addr.) 
define(!w) text(store) text(word) text(in) text(absolute) text(addr.) 
define(!l) text(store) text(long) text(in) text(absolute) text(addr.)
{block 18}
textcapitalized(stack) text(juggling) text(+) text(misc.) 
define(addr) compileword(pop) compileword(;) 
define(rot) hex_executelong(8b045e8b) execute(,) hex_executelong(46e892e) execute(,) hex_executelong(c38b0689) execute(,) hex_executeshort(c3) execute(1,) 
define(-rot) hex_executelong(8b045e8b) execute(,) hex_executelong(446892e) execute(,) hex_executelong(c58b1e89) execute(,) hex_executeshort(c3) execute(1,) 
define(tuck) compileword(swap) compileword(over) compileword(;) 
define(2swap) hex_executelong(87085e8b) execute(,) hex_executelong(85e891e) execute(,) hex_executelong(c3044687) execute(,) 
define(2over) hex_executelong(89f8768d) execute(,) hex_executelong(5e8b0446) execute(,) hex_executelong(8b1e8910) execute(,) hex_executeshort(c30c46) execute(3,) 
define(2dup) compileword(over) compileword(over) compileword(;)
{block 19}
textcapitalized(stack) text(juggling) text(words.) text(small) text(and) text(fast.) 
define(addr) compileword(-a) text(absolute) text(address) 
define(rot) compileword(abc-bca) text(stack) text(pictures) text(are) text(best) text(..) 
define(-rot) compileword(abc-cab) text(..described) text(with) text(letters,) text(in) 
define(tuck) compileword(ab-bab) text(..this) text(case.) 
define(2swap) compileword(abxy-xyab) 
define(2over) compileword(abxy-abxyab) 
define(2dup) compileword(ab-abab)
{block 20}
textcapitalized(interrupts) 
define(sti) hex_compileshort(fb) compileword(1,) compileword(;) text(enable) text(interrupts) text(somewhere) 
define(cli) hex_compileshort(fa) compileword(1,) compileword(;) text(add) text(to) text(empty!) 
define(i;) hex_compileshort(cf) compileword(1,) compileword(;) execute(forth)
{block 21}
define(sti) text(enable) text(device) text(interrupts) 
define(cli) text(disable) text(them) 
define(i;) text(return) text(from) text(interrupt) text(-) text(restore) text(flags)
